library(datasets)
data(iris)
?iris
iris
iris(head)
head(iris)
species_split <- split(iris, iris$Species)
lapply(species_split, function(x) colMeans(iris[ , "Sepal.Length"]))
lapply(species_split, function(x) colMeans(iris[ , c("Sepal.Length", "Sepal.Width")]))
apply(iris[, 1:4], 2, mean)
data(mtcars)
?mtcars
tapply(mtcars$cyl, mtcars$mpg, mean)
apply(mtcars, 2, mean)
sapply(mtcars, cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
with(mtcars, tapply(hp, cyl, mean))
209.21429 - 82.63636
iris
s
s<split(iris, iris$Species)
s <- split(iris, iris$Species)
s
s$virginica
colMean(s$virginica, "Sepal.Length")
apply(s$virginica, 2, mean)
colMeans(s$virginica)
mean(s$virginica[, "Sepal.Length"])
mean(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(iris$Sepal.Length, iris$Species), mean)
getwd()
setwd("C:/Josh/Data Science Series/2 R programming/Assignment2")
getwd()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
matrixinverse <- NULL
set <- function(y) {
x <<- y
matrixinverse <<- NULL
}
get <- function() x
setinverse <- function(solve) matrixinverse <<- solve
getinverse <- function() matrixinverse
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
matrixinverse <- x$getinverse()
if(!is.null(matrixinverse)) {
message("getting cached data")
return(matrixinverse)
}
data <- x$get()
matrixinverse <- solve(data, ...)
x$setinverse(matrixinverse)
matrixinverse
}
x <- matrix(c(1,0,0,1), 2, 2)
x
makeCacheMatrix(x)
cacheSolve(x)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector(1:9)
cachemean(x)
x
cachemean(makeVector(1:9))
cacheSolve(makeCacheMatrix(matrix(c(1,0,0,1), 2, 2)))
cacheSolve(makeCacheMatrix(matrix(c(4,0,0,4), 2, 2)))
x <- makeCacheMatrix(matrix(c(4,0,0,4), 2, 2))
cacheSolve(x)
